CREATE DATABASE company_repository;

CREATE SCHEMA company_storage;

DROP SCHEMA company_storage;

CREATE TABLE company_storage.company
(
    id   INT PRIMARY KEY,
    name VARCHAR(128) UNIQUE NOT NULL,
    date DATE NOT NULL CHECK (date > '1995-01-01' AND date < '2020-01-01')
-- NOT NULL
-- UNIQUE
-- CHECK (date > '1995-01-01' AND date < '2020-01-01')
-- PRIMARY KEY == UNIQUE NOT NULL
-- FOREIGN KEY
);

DROP TABLE company_storage.company;

INSERT INTO company(id, name, date)
VALUES (1, 'Google', '2001-01-01'),
       (2, 'Apple', '2002-10-29'),
       (3, 'Facebook', '1995-09-13');

CREATE TABLE employee
(
    id         SERIAL PRIMARY KEY,
    first_name VARCHAR(128) NOT NULL,
    last_name  VARCHAR(128) NOT NULL,
    company_id INT REFERENCES company (id) ON DELETE CASCADE,
    salary     INT,
    UNIQUE (first_name, last_name)
--     FOREIGN KEY (company_id) REFERENCES company
);
DROP TABLE employee;

insert into employee (first_name, last_name, salary, company_id)
values ('Ivan', 'Sidorov', 500, 1),
       ('Ivan', 'Ivanov', 1000, 2),
       ('Arni', 'Paramonov', NULL, 2),
       ('Petr', 'Petrov', 2000, 3),
       ('Sveta', 'Svetikova', 1500, NULL);

SELECT DISTINCT id,
                first_name f_name,
                last_name  l_name,
                salary
FROM employee empl
WHERE salary IN (1000, 1100, 2000)
   OR (first_name LIKE 'Iv%'
    AND last_name ILIKE '%ov%')
-- WHERE salary IN (1000, 1100, 2000) AND first_name LIKE 'Iv%'
-- WHERE salary BETWEEN 1000 AND 1500
-- WHERE salary > 1200
-- WHERE last_name LIKE '%ov%'
-- WHERE first_name LIKE 'Pet%'
-- WHERE first_name = 'Ivan'
-- WHERE first_name != 'Ivan'
-- < >= <= =    !=, <> - not equal
-- BETWEEN
-- LIKE (ILIKE) %               AND - OR
-- IN
ORDER BY first_name, salary DESC;
-- LIMIT 2
-- OFFSET 2;

SELECT count(*)
FROM employee empl;

SELECT lower(first_name)              name,
       first_name || ' ' || last_name fio,
       now()                          date
--     concat(first_name, ' ', last_name) fio
FROM employee empl;

SELECT now(), 1 * 2 + 3 sum;

SELECT id,
       first_name
FROM employee
WHERE company_id IS NOT NULL
UNION
SELECT id,
       first_name
FROM employee
WHERE salary IS NULL;

SELECT avg(empl.salary)
FROM (SELECT *
      FROM employee e
      ORDER BY salary DESC
      LIMIT 2) empl;

SELECT *,
       (SELECT avg(salary) FROM employee) avg
FROM employee;

SELECT *
FROM employee
WHERE company_id IN (SELECT company.id
                     FROM company
                     WHERE date > '2000-01-01');

SELECT *
FROM employee e
ORDER BY salary
LIMIT 2;

DELETE
FROM employee
WHERE salary IS NULL;

DELETE
FROM employee
WHERE salary = (SELECT max(salary) FROM employee);

DELETE
FROM company
WHERE id = 2;

DELETE
FROM employee
WHERE company_id = 1;

SELECT *
FROM employee;

SELECT *
FROM company;

UPDATE employee
SET company_id = 1,
    salary     = 1700
WHERE id = 5
RETURNING id, first_name || ' ' || employee.last_name fio;


-- ПРАКТИЧЕСКОЕ ЗАДАНИЕ НА НАЧАЛЬНОМ УРОВНЕ --

CREATE TABLE author
(
    id         SERIAL PRIMARY KEY,
    first_name VARCHAR(128) NOT NULL,
    last_name  VARCHAR(128) NOT NULL
);

CREATE TABLE book
(
    id        BIGSERIAL PRIMARY KEY,
    name      VARCHAR(128) NOT NULL,
    year      SMALLINT     NOT NULL,
    pages     SMALLINT     NOT NULL,
    author_id INT REFERENCES author (id) ON DELETE CASCADE
);

INSERT INTO author(first_name, last_name)
VALUES ('Кей', 'Хорстманн'),
       ('Стивен', 'Кови'),
       ('Тони', 'Роббинс'),
       ('Наполеон', 'Хилл'),
       ('Роберт', 'Кийосаки'),
       ('Дейл', 'Карнеги');

SELECT *
FROM author;

SELECT *
FROM book;

INSERT INTO book(name, year, pages, author_id)
VALUES ('Java. Библиотека профессионала. Том 1', 2010, 1102, (SELECT id FROM author WHERE last_name = 'Хорстманн')),
       ('Java. Библиотека профессионала. Том 2', 2012, 954, (SELECT id FROM author WHERE last_name = 'Хорстманн')),
       ('Java SE 8. Вводный курс', 2015, 203, (SELECT id FROM author WHERE last_name = 'Хорстманн')),
       ('7 навыков высокоэффективных людей', 1989, 396, (SELECT id FROM author WHERE last_name = 'Кови')),
       ('Разбуди в себе исполина', 1991, 576, (SELECT id FROM author WHERE last_name = 'Роббинс')),
       ('Думай и богатей', 1937, 336, (SELECT id FROM author WHERE last_name = 'Хилл')),
       ('Богатый папа, бедный папа', 1997, 352, (SELECT id FROM author WHERE last_name = 'Кийосаки')),
       ('Квадрант денежного потока', 1998, 368, (SELECT id FROM author WHERE last_name = 'Кийосаки')),
       ('Как перестать беспокоиться и начать жить', 1948, 368, (SELECT id FROM author WHERE last_name = 'Карнеги')),
       ('Как завоевать друзей и оказывать влияние на людей', 1936, 352,
        (SELECT id FROM author WHERE last_name = 'Карнеги'));

-- Написать запрос, выбирающий: название книги, год и имя автора,
-- отсортированные по году издания книги в возрастающем порядке.

SELECT b.name book,
       b.year,
       (SELECT a.first_name author FROM author a WHERE a.id = b.author_id)
FROM book b
ORDER BY b.year;

-- Написать тот же запрос, но для убывающего порядка.

SELECT b.name book,
       b.year,
       (SELECT a.first_name author FROM author a WHERE a.id = b.author_id)
FROM book b
ORDER BY b.year DESC;

-- Написать запрос, выбирающий количество книг у заданного автора

SELECT count(*) count_of_book
FROM book b
WHERE author_id = (SELECT id FROM author WHERE last_name = 'Карнеги' AND first_name = 'Дейл');

-- Написать запрос, выбирающий книги у которых количество страниц
-- больше среднего количества страниц по всем книгам

SELECT name
FROM book
WHERE pages > (SELECT avg(pages) FROM book);

-- Написать запрос, выбирающий 5 самых старых книг
-- Дополнить запрос и посчитать суммарное количество страниц среди этих книг

SELECT sum(t.pages)
FROM (SELECT pages
      FROM book
      ORDER BY year
      LIMIT 5) t;

SELECT name, year
FROM book
ORDER BY year
LIMIT 5;

-- Написать запрос, изменяющий количество страниц у одной из книг

UPDATE book
SET pages = 954
WHERE id = 2
RETURNING name, year, pages;

-- Написать запрос, удаляющий автора, который написал самую большую книгу

DELETE
FROM book
WHERE author_id = (SELECT author_id
                   FROM book
                   WHERE pages = (SELECT max(pages) FROM book))
RETURNING *;

DELETE
FROM author
WHERE id = (SELECT author_id
            FROM book
            WHERE pages = (SELECT max(pages) FROM book))
RETURNING *;

INSERT INTO author(first_name, last_name)
VALUES ('Кей', 'Хорстманн');

INSERT INTO book(name, year, pages, author_id)
VALUES('Java. Библиотека профессионала. Том 1', 2010, 1102, (SELECT id FROM author WHERE last_name = 'Хорстманн')),
      ('Java. Библиотека профессионала. Том 2', 2012, 954, (SELECT id FROM author WHERE last_name = 'Хорстманн')),
      ('Java SE 8. Вводный курс', 2015, 203, (SELECT id FROM author WHERE last_name = 'Хорстманн'));

